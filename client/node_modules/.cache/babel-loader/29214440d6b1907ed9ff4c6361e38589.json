{"ast":null,"code":"var _jsxFileName = \"/Users/andres/Documents/dietsii/client/src/contexts/Users.js\";\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UsersContext = /*#__PURE__*/React.createContext();\nconst API_URL = process.env.NODE_ENV === 'production' ? 'PRODUCTION_URL' : 'http://localhost:5000';\n\nclass UsersContextProvider extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = async () => {\n      const res = await fetch(`${API_URL}/api/users/currentUser`, {\n        credentials: 'include'\n      });\n      const data = await res.json();\n      const isLoggedIn = data.user ? true : false;\n      const user = data.user ? data.user : {};\n      this.setState({\n        isLoggedIn,\n        user\n      });\n    };\n\n    this.logUserIn = async (username, password) => {\n      let title, text;\n      const res = await fetch(`${API_URL}/api/users/login`, {\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        method: 'POST',\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n      const {\n        user,\n        statusCode: responseStatus\n      } = await res.json();\n\n      if (responseStatus === 422) {\n        title = 'Ooops!';\n        text = 'Incorrect credentials.';\n      } else if (responseStatus === 204) {\n        this.setState({\n          isLoggedIn: true,\n          user\n        });\n        title = 'Done';\n        text = 'You will get redirected to home page.';\n      } else {\n        title = 'Ooops!';\n        text = 'Something went wrong. Try again later.';\n      }\n\n      return {\n        title,\n        text\n      };\n    };\n\n    this.registerUser = async (username, email, password, confirmPassword) => {\n      let title, text;\n\n      if (password.length < 8 || confirmPassword.length < 8) {\n        title = 'Ooops!';\n        text = 'Password must be longer than 8 chars.';\n      } else if (password !== confirmPassword) {\n        title = 'Ooops!';\n        text = 'Password and Confirm Password must match.';\n      } else {\n        const res = await fetch(`${API_URL}/api/users/register`, {\n          headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n          },\n          credentials: 'include',\n          method: 'POST',\n          body: JSON.stringify({\n            username,\n            email,\n            password\n          })\n        });\n        const responseStatus = res.status;\n\n        if (responseStatus === 409) {\n          title = 'Ooops!';\n          text = 'Username already taken.';\n        } else if (responseStatus === 201) {\n          title = 'Done';\n          text = 'Your account was created.';\n        } else {\n          title = 'Ooops!';\n          text = 'Something went wrong. Try again later.';\n        }\n      }\n\n      return {\n        title,\n        text\n      };\n    };\n\n    this.logUserOut = async () => {\n      await fetch(`${API_URL}/api/users/logout`, {\n        credentials: 'include',\n        method: 'POST'\n      });\n      this.setState({\n        isLoggedIn: false,\n        user: {}\n      });\n    };\n\n    this.state = {\n      isLoggedIn: false,\n      user: {},\n      logUserIn: this.logUserIn,\n      logUserOut: this.logUserOut,\n      registerUser: this.registerUser\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(UsersContext.Provider, {\n      value: this.state,\n      children: this.props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport { UsersContext, UsersContextProvider };","map":{"version":3,"sources":["/Users/andres/Documents/dietsii/client/src/contexts/Users.js"],"names":["React","Component","UsersContext","createContext","API_URL","process","env","NODE_ENV","UsersContextProvider","constructor","props","componentDidMount","res","fetch","credentials","data","json","isLoggedIn","user","setState","logUserIn","username","password","title","text","headers","Accept","method","body","JSON","stringify","statusCode","responseStatus","registerUser","email","confirmPassword","length","status","logUserOut","state","render","children"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nconst UsersContext = React.createContext();\nconst API_URL =\n  process.env.NODE_ENV === 'production'\n    ? 'PRODUCTION_URL'\n    : 'http://localhost:5000';\n\nclass UsersContextProvider extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoggedIn: false,\n      user: {},\n      logUserIn: this.logUserIn,\n      logUserOut: this.logUserOut,\n      registerUser: this.registerUser,\n    };\n  }\n\n  componentDidMount = async () => {\n    const res = await fetch(`${API_URL}/api/users/currentUser`, {\n      credentials: 'include',\n    });\n    const data = await res.json();\n\n    const isLoggedIn = data.user ? true : false;\n    const user = data.user ? data.user : {};\n    this.setState({ isLoggedIn, user });\n  };\n\n  logUserIn = async (username, password) => {\n    let title, text;\n\n    const res = await fetch(`${API_URL}/api/users/login`, {\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n      credentials: 'include',\n      method: 'POST',\n      body: JSON.stringify({ username, password }),\n    });\n\n    const { user, statusCode: responseStatus } = await res.json();\n\n    if (responseStatus === 422) {\n      title = 'Ooops!';\n      text = 'Incorrect credentials.';\n    } else if (responseStatus === 204) {\n      this.setState({\n        isLoggedIn: true,\n        user,\n      });\n\n      title = 'Done';\n      text = 'You will get redirected to home page.';\n    } else {\n      title = 'Ooops!';\n      text = 'Something went wrong. Try again later.';\n    }\n\n    return { title, text };\n  };\n\n  registerUser = async (username, email, password, confirmPassword) => {\n    let title, text;\n\n    if (password.length < 8 || confirmPassword.length < 8) {\n      title = 'Ooops!';\n      text = 'Password must be longer than 8 chars.';\n    } else if (password !== confirmPassword) {\n      title = 'Ooops!';\n      text = 'Password and Confirm Password must match.';\n    } else {\n      const res = await fetch(`${API_URL}/api/users/register`, {\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        method: 'POST',\n        body: JSON.stringify({ username, email, password }),\n      });\n\n      const responseStatus = res.status;\n\n      if (responseStatus === 409) {\n        title = 'Ooops!';\n        text = 'Username already taken.';\n      } else if (responseStatus === 201) {\n        title = 'Done';\n        text = 'Your account was created.';\n      } else {\n        title = 'Ooops!';\n        text = 'Something went wrong. Try again later.';\n      }\n    }\n\n    return { title, text };\n  };\n\n  logUserOut = async () => {\n    await fetch(`${API_URL}/api/users/logout`, {\n      credentials: 'include',\n      method: 'POST',\n    });\n\n    this.setState({ isLoggedIn: false, user: {} });\n  };\n\n  render() {\n    return (\n      <UsersContext.Provider value={this.state}>\n        {this.props.children}\n      </UsersContext.Provider>\n    );\n  }\n}\n\nexport { UsersContext, UsersContextProvider };"]},"metadata":{},"sourceType":"module"}